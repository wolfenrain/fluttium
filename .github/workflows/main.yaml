name: ci

on:
  pull_request:
    branches:
      - main

jobs:
  # Ensures that every PR has a semantic title or commit.
  semantic_pull_request:
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1

  # Enforces the spelling of words in the repository.
  spell_check:
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/spell_check.yml@v1
    with:
      config: cspell.json
      includes: |
        **/*.{dart,md,yaml}
        !.dart_tool/**/*.{dart,yaml}
        .*/**/*.yml
      runs_on: macos-latest
      modified_files_only: false

  # Format and build the docs. This job will always run but it will end early
  # if the docs haven't changed.
  docs:
    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: ☕️ Setup Change Filters
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            docs:
              - '.github/actions/docs/action.yaml'
              - 'docs/**'

      - name: 📑 Format, Lint and Build Docs
        uses: ./.github/actions/docs
        if: steps.changes.outputs.docs == 'true'

  # Format, analyze, and test the example code. This job will always run but it will end
  # early if the example code hasn't changed.
  example:
    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: ☕️ Setup Change Filters
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            example:
              - '.github/actions/flutter_package/action.yaml'
              - 'example/**'

      - name: 📑 Format, Analyze and Test Example
        uses: ./.github/actions/flutter_package
        if: steps.changes.outputs.example == 'true'
        with:
          working_directory: example

  # Creates a list of packages that have changed and stores them in the
  # outputs. Jobs like build and pana uses these values to determine which
  # packages to build and test.
  package_changes:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: read

    outputs:
      packages: ${{ steps.filter.outputs.changes }}

    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            fluttium:
              - ./.github/actions/flutter_package
              - packages/fluttium/**
            fluttium_cli:
              - ./.github/actions/dart_package
              - packages/fluttium_cli/**
            fluttium_driver:
              - ./.github/actions/dart_package
              - packages/fluttium_driver/**
            fluttium_interfaces:
              - ./.github/actions/dart_package
              - packages/fluttium_interfaces/**
            fluttium_protocol:
              - ./.github/actions/dart_package
              - packages/fluttium_protocol/**

  # Build and test the dart packages that have changed.
  #
  # If the matrix is empty, no jobs will be created.
  build_packages:
    needs: package_changes

    strategy:
      matrix:
        package: ${{ fromJSON(needs.package_changes.outputs.packages) }}

    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: ❓ Dart Or Flutter
        id: dart_or_flutter
        run: |
          echo "dart_or_flutter=$(cat packages/${{ matrix.package }}/pubspec.yaml | grep -q 'sdk: flutter' && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: 🐦 Dart Format, Analyze and Test (${{ matrix.package }})
        if: steps.dart_or_flutter.outputs.dart_or_flutter == 'false'
        uses: ./.github/actions/dart_package
        with:
          working_directory: packages/${{ matrix.package }}

      - name: 💙 Flutter Format, Analyze and Test (${{ matrix.package }})
        if: steps.dart_or_flutter.outputs.dart_or_flutter == 'true'
        uses: ./.github/actions/flutter_package
        with:
          working_directory: packages/${{ matrix.package }}

  # Run pana on the packages that have changed.
  #
  # If the matrix is empty, no jobs will be created.
  pana:
    needs: package_changes

    strategy:
      matrix:
        package: ${{ fromJSON(needs.package_changes.outputs.packages) }}

    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: 📊 Verify Pana Score (${{ matrix.package }})
        uses: ./.github/actions/pana
        with:
          working_directory: packages/${{ matrix.package }}

  brick_changes:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: read

    outputs:
      bricks: ${{ steps.filter.outputs.changes }}

    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            fluttium_launcher:
              - ./.github/actions/dart_package
              - bricks/fluttium_launcher/hooks/**
            fluttium_test_runner:
              - ./.github/actions/dart_package
              - bricks/fluttium_test_runner/hooks/**

  # Build and test the bricks that have changed.
  #
  # If the matrix is empty, no jobs will be created.
  build_bricks:
    needs: brick_changes

    strategy:
      matrix:
        brick: ${{ fromJSON(needs.brick_changes.outputs.bricks) }}

    runs-on: ubuntu-latest

    steps:
      - name: 📚 Git Checkout
        uses: actions/checkout@v3

      - name: ✨ Format, Analyze and Test (${{ matrix.brick }})
        uses: ./.github/actions/dart_package
        with:
          working_directory: bricks/${{ matrix.brick }}/hooks
          analyze_directories: .
          report_on: post_gen.dart,pre_gen.dart

  # Simply exists to be the final job in the workflow. This is required to
  # ensure that the workflow fails if any of the needed jobs fail.
  #
  # The build and pana job might not spawn but as long as the other jobs
  # succeed this job will be considered successful through skipping.
  ci:
    needs:
      [
        spell_check,
        semantic_pull_request,
        docs,
        example,
        build_packages,
        pana,
        build_bricks,
      ]

    runs-on: ubuntu-latest

    steps:
      - name: noop
        run: echo 'noop'
